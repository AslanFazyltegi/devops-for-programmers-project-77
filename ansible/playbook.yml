---
- name: Prepare servers for deployment, deploy Redmine and configure DataDog
  hosts: all
  become: true
  vars_files:
    - group_vars/webservers/vault.yml

  roles:
    - geerlingguy.pip

  tasks:
    # Installing Docker Engine
    - name: Install Docker Engine
      ansible.builtin.apt:
        name: docker.io
        state: present
        update_cache: yes
      tags: prepare

    # Install Docker Python library
    - name: Install Docker Python library
      ansible.builtin.command:
        cmd: "pip3 install docker"
        creates: /usr/local/bin/docker
      tags: prepare

# Deploy Redmine App with Mysql_8 DB
    - name: Create environment file from template
      ansible.builtin.template:
        src: templates/.env.j2
        dest: /home/admin/.env
        owner: admin
        group: admin
        mode: 0644
      tags: deploy

    - name: Pull MySQL8 Docker image
      community.docker.docker_image:
        name: mysql:8
        source: pull
      tags: deploy

    - name: Pull Redmine Docker image
      community.docker.docker_image:
        name: redmine
        source: pull
      tags: deploy

    - name: Ensure Docker network redmine-network exists
      community.docker.docker_network:
        name: redmine-network
        state: present
      tags: deploy

    - name: Run MySQL8 container
      community.docker.docker_container:
        name: redmine-mysql
        image: mysql:8
        state: started
        restart_policy: unless-stopped
        network_mode: redmine-network
        env_file: /home/admin/.env
      tags: deploy

    - name: Wait 10s for MySQL to be ready
      wait_for:
        timeout: 10
      tags: deploy

    - name: Run Redmine container
      community.docker.docker_container:
        name: redmine
        image: redmine
        state: started
        restart_policy: always
        env_file: /home/admin/.env
        network_mode: redmine-network
        ports:
          - "3000:3000"
      tags: deploy

#DataDog install and configure
- name: Installing and starting DataDog on webservers only
  hosts: webservers
  become: yes
  vars_files:
    - group_vars/webservers/vault.yml
  tasks:
    - name: Install agent DataDog
      shell: |
        DD_API_KEY={{ DD_API_KEY }} \
        DD_SITE={{ DD_SITE }} \
        bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)"
      args:
        creates: /etc/datadog-agent/datadog.yaml
      tags: datadog

    - name: Starting agent DataDog
      service:
        name: datadog-agent
        state: started
        enabled: yes
      tags: datadog

    - name: Configuring http_check for monitoring
      copy:
        dest: /etc/datadog-agent/conf.d/http_check.d/conf.yaml
        content: |
          init_config:

          instances:
            - name: "App Health Check"
              url: "http://hexletlab.adizit.kz:8080/health"
              timeout: 5
              check_interval: 30
              thresholds:
                critical: 1
                warning: 2
              tags:
                - "env:production"
                - "service:app_health"
        owner: root
        group: root
        mode: "0644"
      tags: datadog

    - name: Restarting DataDog
      service:
        name: datadog-agent
        state: restarted
      tags: datadog

