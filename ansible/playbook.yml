---
- name: Prepare servers for deployment, deploy Redmine and configure DataDog
  hosts: all
  become: true

  roles:
    - geerlingguy.pip

  tasks:
    # Installing Docker Engine
    - name: Install Docker Engine
      ansible.builtin.apt:
        name: docker.io
        state: present
        update_cache: yes
      tags: prepare

    # Install Docker Python library
    - name: Install Docker Python library
      ansible.builtin.command:
        cmd: "pip3 install docker"
        creates: /usr/local/bin/docker
      tags: prepare

    # Create environment file from template (for Redmine deployment)
    - name: Create environment file from template
      ansible.builtin.template:
        src: templates/.env.j2
        dest: /root/.env
        owner: root
        group: root
        mode: 0644
      tags: deploy

    # Create Dockerfile file from template
    - name: Create Dockerfile file from template
      ansible.builtin.template:
        src: templates/Dockerfile.j2
        dest: /root/Dockerfile
        owner: root
        group: root
        mode: 0644
      tags: deploy

    # Redmine Image Building
    - name: Redmine Image Building
      shell: |
        cd /root && docker build -t redmine:yandex-cloud . && touch /root/redmine-built.flag
      args:
        creates: /root/redmine-built.flag
      tags: deploy

    # Ensure Docker network exists
    - name: Ensure Docker network exists
      community.docker.docker_network:
        name: redmine-network
        state: present
      tags: deploy

    # Run Redmine container
    - name: Run Redmine container
      community.docker.docker_container:
        name: redmine
        image: redmine:yandex-cloud
        state: started
        restart_policy: always
        env_file: /root/.env
        ports:
          - "3000:3000"
        networks:
          - name: redmine-network
      tags: deploy

- name: Installing and starting DataDog on webservers only
  hosts: webservers
  become: yes
#  vars_files:
#    - group_vars/webservers/vault.yml
  tasks:
    - name: Install agent DataDog
      shell: |
        DD_API_KEY={{ DD_API_KEY }} \
        DD_SITE={{ DD_SITE }} \
        bash -c "$(curl -L https://install.datadoghq.com/scripts/install_script_agent7.sh)"
      args:
        creates: /etc/datadog-agent/datadog.yaml

    - name: Starting agent DataDog
      service:
        name: datadog-agent
        state: started
        enabled: yes

    - name: Configuring http_check for monitoring
      copy:
        dest: /etc/datadog-agent/conf.d/http_check.d/conf.yaml
        content: |
          init_config:

          instances:
            - name: "App Health Check"
              url: "http://hexletlab.adizit.kz:8080/health"
              timeout: 5
              check_interval: 30
              thresholds:
                critical: 1
                warning: 2
              tags:
                - "env:production"
                - "service:app_health"
        owner: root
        group: root
        mode: "0644"

    - name: Restarting DataDog
      service:
        name: datadog-agent
        state: restarted
